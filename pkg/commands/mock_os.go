// Code generated by MockGen. DO NOT EDIT.
// Source: os.go

// Package commands is a generated GoMock package.
package commands

import (
	gomock "github.com/golang/mock/gomock"
	exec "os/exec"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// RunCommandWithOutput mocks base method
func (m *MockCommand) RunCommandWithOutput(command string) (string, error) {
	ret := m.ctrl.Call(m, "RunCommandWithOutput", command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCommandWithOutput indicates an expected call of RunCommandWithOutput
func (mr *MockCommandMockRecorder) RunCommandWithOutput(command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandWithOutput", reflect.TypeOf((*MockCommand)(nil).RunCommandWithOutput), command)
}

// RunCommand mocks base method
func (m *MockCommand) RunCommand(command string) error {
	ret := m.ctrl.Call(m, "RunCommand", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommand indicates an expected call of RunCommand
func (mr *MockCommandMockRecorder) RunCommand(command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommand", reflect.TypeOf((*MockCommand)(nil).RunCommand), command)
}

// FileType mocks base method
func (m *MockCommand) FileType(path string) string {
	ret := m.ctrl.Call(m, "FileType", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// FileType indicates an expected call of FileType
func (mr *MockCommandMockRecorder) FileType(path interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileType", reflect.TypeOf((*MockCommand)(nil).FileType), path)
}

// RunDirectCommand mocks base method
func (m *MockCommand) RunDirectCommand(command string) (string, error) {
	ret := m.ctrl.Call(m, "RunDirectCommand", command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunDirectCommand indicates an expected call of RunDirectCommand
func (mr *MockCommandMockRecorder) RunDirectCommand(command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunDirectCommand", reflect.TypeOf((*MockCommand)(nil).RunDirectCommand), command)
}

// OpenFile mocks base method
func (m *MockCommand) OpenFile(filename string) error {
	ret := m.ctrl.Call(m, "OpenFile", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenFile indicates an expected call of OpenFile
func (mr *MockCommandMockRecorder) OpenFile(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockCommand)(nil).OpenFile), filename)
}

// OpenLink mocks base method
func (m *MockCommand) OpenLink(link string) error {
	ret := m.ctrl.Call(m, "OpenLink", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenLink indicates an expected call of OpenLink
func (mr *MockCommandMockRecorder) OpenLink(link interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenLink", reflect.TypeOf((*MockCommand)(nil).OpenLink), link)
}

// EditFile mocks base method
func (m *MockCommand) EditFile(filename string) (*exec.Cmd, error) {
	ret := m.ctrl.Call(m, "EditFile", filename)
	ret0, _ := ret[0].(*exec.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditFile indicates an expected call of EditFile
func (mr *MockCommandMockRecorder) EditFile(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditFile", reflect.TypeOf((*MockCommand)(nil).EditFile), filename)
}

// PrepareSubProcess mocks base method
func (m *MockCommand) PrepareSubProcess(cmdName string, commandArgs ...string) *exec.Cmd {
	varargs := []interface{}{cmdName}
	for _, a := range commandArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrepareSubProcess", varargs...)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// PrepareSubProcess indicates an expected call of PrepareSubProcess
func (mr *MockCommandMockRecorder) PrepareSubProcess(cmdName interface{}, commandArgs ...interface{}) *gomock.Call {
	varargs := append([]interface{}{cmdName}, commandArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareSubProcess", reflect.TypeOf((*MockCommand)(nil).PrepareSubProcess), varargs...)
}

// Quote mocks base method
func (m *MockCommand) Quote(message string) string {
	ret := m.ctrl.Call(m, "Quote", message)
	ret0, _ := ret[0].(string)
	return ret0
}

// Quote indicates an expected call of Quote
func (mr *MockCommandMockRecorder) Quote(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quote", reflect.TypeOf((*MockCommand)(nil).Quote), message)
}

// Unquote mocks base method
func (m *MockCommand) Unquote(message string) string {
	ret := m.ctrl.Call(m, "Unquote", message)
	ret0, _ := ret[0].(string)
	return ret0
}

// Unquote indicates an expected call of Unquote
func (mr *MockCommandMockRecorder) Unquote(message interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unquote", reflect.TypeOf((*MockCommand)(nil).Unquote), message)
}

// AppendLineToFile mocks base method
func (m *MockCommand) AppendLineToFile(filename, line string) error {
	ret := m.ctrl.Call(m, "AppendLineToFile", filename, line)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendLineToFile indicates an expected call of AppendLineToFile
func (mr *MockCommandMockRecorder) AppendLineToFile(filename, line interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendLineToFile", reflect.TypeOf((*MockCommand)(nil).AppendLineToFile), filename, line)
}

// CreateTempFile mocks base method
func (m *MockCommand) CreateTempFile(filename, content string) (string, error) {
	ret := m.ctrl.Call(m, "CreateTempFile", filename, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTempFile indicates an expected call of CreateTempFile
func (mr *MockCommandMockRecorder) CreateTempFile(filename, content interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTempFile", reflect.TypeOf((*MockCommand)(nil).CreateTempFile), filename, content)
}

// RemoveFile mocks base method
func (m *MockCommand) RemoveFile(filename string) error {
	ret := m.ctrl.Call(m, "RemoveFile", filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile
func (mr *MockCommandMockRecorder) RemoveFile(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockCommand)(nil).RemoveFile), filename)
}

// GetPlatform mocks base method
func (m *MockCommand) GetPlatform() *Platform {
	ret := m.ctrl.Call(m, "GetPlatform")
	ret0, _ := ret[0].(*Platform)
	return ret0
}

// GetPlatform indicates an expected call of GetPlatform
func (mr *MockCommandMockRecorder) GetPlatform() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatform", reflect.TypeOf((*MockCommand)(nil).GetPlatform))
}

// SetGetGlobalGitConfig mocks base method
func (m *MockCommand) SetGetGlobalGitConfig(arg0 func(string) (string, error)) {
	m.ctrl.Call(m, "SetGetGlobalGitConfig", arg0)
}

// SetGetGlobalGitConfig indicates an expected call of SetGetGlobalGitConfig
func (mr *MockCommandMockRecorder) SetGetGlobalGitConfig(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGetGlobalGitConfig", reflect.TypeOf((*MockCommand)(nil).SetGetGlobalGitConfig), arg0)
}

// SetGetEnv mocks base method
func (m *MockCommand) SetGetEnv(arg0 func(string) string) {
	m.ctrl.Call(m, "SetGetEnv", arg0)
}

// SetGetEnv indicates an expected call of SetGetEnv
func (mr *MockCommandMockRecorder) SetGetEnv(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGetEnv", reflect.TypeOf((*MockCommand)(nil).SetGetEnv), arg0)
}

// SetCommand mocks base method
func (m *MockCommand) SetCommand(arg0 func(string, ...string) *exec.Cmd) {
	m.ctrl.Call(m, "SetCommand", arg0)
}

// SetCommand indicates an expected call of SetCommand
func (mr *MockCommandMockRecorder) SetCommand(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommand", reflect.TypeOf((*MockCommand)(nil).SetCommand), arg0)
}
